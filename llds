#include <iostream>
#include <cassert>
struct NODE
{
    int key;
    NODE* p_next;
};

struct List
{
    NODE* p_head;
    NODE* p_tail;
    List(NODE* head = nullptr, NODE* tail = nullptr) : p_head(head), p_tail(tail) {}
};

// --- Define function prototypes ---
NODE* createNode(int data);
List* createList(NODE* p_node);
bool addHead(List*& L, int data);
bool addTail(List*& L, int data);
bool removeHead(List*& L);
void removeTail(List*& L);
void removeAll(List*& L);
void removeBefore(List*& L, int val);
void removeAfter(List*& L, int val);
bool addPos(List*& L, int data, int pos);
void removePos(List*& L, int data, int pos);
bool addBefore(List*& L, int data, int val);
bool addAfter(List*& L, int data, int val);
void printList(List* L);
int countElements(List* L);
List* reverseList(List* L);
void removeDuplicate(List*& L);
bool removeElement(List*& L, int key);

// function to create a list from an array
List* createListFromArray(int arr[], int n)
{
    List* newList = new List();
    newList->p_head = nullptr;
    newList->p_tail = nullptr;
    for (int i = 0; i < n; ++i)
    {
        addTail(newList, arr[i]);
    }
    return newList;
}

// function to compare two lists
bool areListsEqual(List* list1, List* list2)
{
    NODE* current1 = list1 ? list1->p_head : nullptr;
    NODE* current2 = list2 ? list2->p_head : nullptr;
    while (current1 && current2)
    {
        if (current1->key != current2->key)
        {
            return false;
        }
        current1 = current1->p_next;
        current2 = current2->p_next;
    }
    return (current1 == nullptr && current2 == nullptr);
}

// function to free the memory of a list
void freeList(List* L)
{
    if (!L) return;

    NODE* current = L->p_head;
    while (current)
    {
        NODE* next = current->p_next;
        delete current;
        current = next;
    }
    delete L;
}

NODE* createNode(int data)
{
    NODE* newNode = new NODE;
    newNode->key = data;
    newNode->p_next = nullptr;
    return newNode;
}

List* createList(NODE* p_node)
{
    List* newList = new List();
    if (p_node) {
        newList->p_head = p_node;
        newList->p_tail = p_node;
    }
    return newList;
}

bool addHead(List*& L, int data)
{
    if (!L) return false;

    NODE* newNode = createNode(data);
    if (!newNode) return false;

    if (L->p_head == nullptr) {
        L->p_head = L->p_tail = newNode;
    }
    else {
        newNode->p_next = L->p_head;
        L->p_head = newNode;
    }
    return true;
}

bool addTail(List*& L, int data)
{
    if (!L) return false;

    NODE* newNode = createNode(data);
    if (!newNode) return false;

    if (L->p_head == nullptr) {
        L->p_head = L->p_tail = newNode;
    }
    else {
        L->p_tail->p_next = newNode;
        L->p_tail = newNode;
    }
    return true;
}

bool removeHead(List*& L)
{
    if (!L || !L->p_head) return false;

    NODE* temp = L->p_head;
    L->p_head = L->p_head->p_next;
    delete temp;

    if (!L->p_head) {
        L->p_tail = nullptr;
    }
    return true;
}

void removeTail(List*& L)
{
    if (!L || !L->p_head) return;

    if (L->p_head == L->p_tail) {
        delete L->p_head;
        L->p_head = L->p_tail = nullptr;
        return;
    }

    NODE* prev = L->p_head;
    while (prev->p_next != L->p_tail) {
        prev = prev->p_next;
    }

    delete L->p_tail;
    L->p_tail = prev;
    prev->p_next = nullptr;
}

void removeAll(List*& L)
{
    if (!L) return;

    while (L->p_head) {
        removeHead(L);
    }
}

void removeBefore(List*& L, int val)
{
    if (!L || !L->p_head || !L->p_head->p_next) return;

    if (L->p_head->p_next->key == val) {
        removeHead(L);
        return;
    }

    NODE* prev = nullptr;
    NODE* curr = L->p_head;

    while (curr->p_next && curr->p_next->key != val) {
        prev = curr;
        curr = curr->p_next;
    }

    if (curr->p_next && curr->p_next->key == val && prev) {
        prev->p_next = curr->p_next;
        delete curr;
    }
}

void removeAfter(List*& L, int val)
{
    if (!L || !L->p_head) return;

    NODE* curr = L->p_head;
    while (curr && curr->key != val) {
        curr = curr->p_next;
    }

    if (curr && curr->p_next) {
        NODE* temp = curr->p_next;
        curr->p_next = temp->p_next;
        if (temp == L->p_tail) {
            L->p_tail = curr;
        }
        delete temp;
    }
}

bool addPos(List*& L, int data, int pos)
{
    if (!L || pos < 0) return false;
    if (pos == 0) return addHead(L, data);

    NODE* newNode = createNode(data);
    if (!newNode) return false;

    NODE* prev = nullptr;
    NODE* curr = L->p_head;
    int count = 0;

    while (curr && count < pos) {
        prev = curr;
        curr = curr->p_next;
        count++;
    }

    if (count != pos) {
        delete newNode;
        return false;
    }

    prev->p_next = newNode;
    newNode->p_next = curr;

    if (!curr) {
        L->p_tail = newNode;
    }

    return true;
}

void removePos(List*& L, int data, int pos)
{
    if (!L || !L->p_head || pos < 0) return;

    if (pos == 0) {
        removeHead(L);
        return;
    }

    NODE* prev = nullptr;
    NODE* curr = L->p_head;
    int count = 0;

    while (curr && count < pos) {
        prev = curr;
        curr = curr->p_next;
        count++;
    }

    if (curr) {
        prev->p_next = curr->p_next;
        if (curr == L->p_tail) {
            L->p_tail = prev;
        }
        delete curr;
    }
}

bool addBefore(List*& L, int data, int val)
{
    if (!L || !L->p_head) return false;

    if (L->p_head->key == val) {
        return addHead(L, data);
    }

    NODE* prev = nullptr;
    NODE* curr = L->p_head;

    while (curr && curr->key != val) {
        prev = curr;
        curr = curr->p_next;
    }

    if (!curr) return false;

    NODE* newNode = createNode(data);
    if (!newNode) return false;

    prev->p_next = newNode;
    newNode->p_next = curr;
    return true;
}

bool addAfter(List*& L, int data, int val)
{
    if (!L || !L->p_head) return false;

    NODE* curr = L->p_head;
    while (curr && curr->key != val) {
        curr = curr->p_next;
    }

    if (!curr) return false;

    NODE* newNode = createNode(data);
    if (!newNode) return false;

    newNode->p_next = curr->p_next;
    curr->p_next = newNode;

    if (curr == L->p_tail) {
        L->p_tail = newNode;
    }

    return true;
}

void printList(List* L)
{
    if (!L || !L->p_head) {
        std::cout << "List is empty" << std::endl;
        return;
    }

    NODE* curr = L->p_head;
    while (curr) {
        std::cout << curr->key << " ";
        curr = curr->p_next;
    }
    std::cout << std::endl;
}

int countElements(List* L)
{
    if (!L || !L->p_head) return 0;

    int count = 0;
    NODE* curr = L->p_head;
    while (curr) {
        count++;
        curr = curr->p_next;
    }
    return count;
}

List* reverseList(List* L) {
    if (!L || !L->p_head) {
        return nullptr;
    }

    List* reversed = new List();
    NODE* current = L->p_head;
    while (current) {
        addHead(reversed, current->key);
        current = current->p_next;
    }
    return reversed;
}
void removeDuplicate(List*& L)
{
    if (!L || !L->p_head) return;

    NODE* current = L->p_head;
    while (current) {
        NODE* runner = current;
        while (runner->p_next) {
            if (runner->p_next->key == current->key) {
                NODE* temp = runner->p_next;
                runner->p_next = runner->p_next->p_next;
                if (temp == L->p_tail) {
                    L->p_tail = runner;
                }
                delete temp;
            }
            else {
                runner = runner->p_next;
            }
        }
        current = current->p_next;
    }
}

bool removeElement(List*& L, int key)
{
    if (!L || !L->p_head) return false;

    bool removed = false;

    // Remove from head if matches
    while (L->p_head && L->p_head->key == key) {
        removeHead(L);
        removed = true;
    }

    if (!L->p_head) return removed;

    NODE* prev = L->p_head;
    NODE* curr = L->p_head->p_next;

    while (curr) {
        if (curr->key == key) {
            prev->p_next = curr->p_next;
            if (curr == L->p_tail) {
                L->p_tail = prev;
            }
            delete curr;
            curr = prev->p_next;
            removed = true;
        }
        else {
            prev = curr;
            curr = curr->p_next;
        }
    }

    return removed;
}

// --- Function main to test the above functions ---
int main()
{
    std::cout << "--- Begin running test cases ---" << std::endl;

    // Test case 1: createNode
    std::cout << "Test 1/18 - createNode: ";
    NODE* node1 = createNode(10);
    assert(node1 != nullptr && node1->key == 10 && node1->p_next == nullptr);
    std::cout << "Passed" << std::endl;
    delete node1;

    // Test case 2: createList
    std::cout << "Test 2/18 - createList: ";
    NODE* head2 = createNode(20);
    List* list2 = createList(head2);
    assert(list2 != nullptr && list2->p_head == head2 && list2->p_tail == head2);
    std::cout << "Passed" << std::endl;
    freeList(list2);

    // Test case 3: addHead
    std::cout << "Test 3/18 - addHead: ";
    List* list3 = new List();
    assert(addHead(list3, 30));
    assert(list3->p_head != nullptr && list3->p_head->key == 30 && list3->p_tail->key == 30);
    assert(addHead(list3, 40));
    assert(list3->p_head->key == 40 && list3->p_head->p_next->key == 30 && list3->p_tail->key == 30);
    std::cout << "Passed" << std::endl;
    freeList(list3);

    // Test case 4: addTail
    std::cout << "Test 4/18 - addTail: ";
    List* list4 = new List();
    assert(addTail(list4, 50));
    assert(list4->p_head != nullptr && list4->p_head->key == 50 && list4->p_tail->key == 50);
    assert(addTail(list4, 60));
    assert(list4->p_head->key == 50 && list4->p_tail->key == 60 && list4->p_head->p_next->key == 60);
    std::cout << "Passed" << std::endl;
    freeList(list4);

    // Test case 5: removeHead
    std::cout << "Test 5/18 - removeHead: ";
    int arr1[3] = { 70, 80, 90 };
    List* list5 = createListFromArray(arr1, 3);
    assert(removeHead(list5) && list5->p_head->key == 80);
    assert(removeHead(list5) && list5->p_head->key == 90);
    assert(removeHead(list5) && list5->p_head == nullptr && list5->p_tail == nullptr);
    assert(!removeHead(list5)); // Remove from empty list
    std::cout << "Passed" << std::endl;
    freeList(list5);

    // Test case 6: removeTail
    std::cout << "Test 6/18 - removeTail: ";
    int arr2[3] = { 100, 110, 120 };
    List* list6 = createListFromArray(arr2, 3);
    removeTail(list6);
    assert(list6->p_tail->key == 110 && list6->p_tail->p_next == nullptr);
    removeTail(list6);
    assert(list6->p_tail->key == 100 && list6->p_tail->p_next == nullptr && list6->p_head == list6->p_tail);
    removeTail(list6);
    assert(list6->p_head == nullptr && list6->p_tail == nullptr);
    List* emptyList6 = new List();
    removeTail(emptyList6); // Remove from empty list
    std::cout << "Passed" << std::endl;
    freeList(emptyList6);
    freeList(list6);

    // Test case 7: removeAll
    std::cout << "Test 7/18 - removeAll: ";
    int arr3[3] = { 130, 140, 150 };
    List* list7 = createListFromArray(arr3, 3);
    removeAll(list7);
    assert(list7->p_head == nullptr && list7->p_tail == nullptr);
    List* emptyList7 = new List();
    removeAll(emptyList7); // Remove from empty list
    assert(emptyList7->p_head == nullptr && emptyList7->p_tail == nullptr);
    std::cout << "Passed" << std::endl;
    freeList(emptyList7);
    freeList(list7);

    // Test case 8: removeBefore
    std::cout << "Test 8/18 - removeBefore: ";
    int arr4[5] = { 160, 170, 180, 190, 200 };
    List* list8 = createListFromArray(arr4, 5);
    removeBefore(list8, 180);
    int expectedArr8[4] = { 160, 180, 190, 200 };
    List* expectedList8 = createListFromArray(expectedArr8, 4);
    assert(areListsEqual(list8, expectedList8));
    removeBefore(list8, 200);
    int expectedArr8_2[3] = { 160, 180, 200 };
    List* expectedList8_2 = createListFromArray(expectedArr8_2, 3);
    assert(areListsEqual(list8, expectedList8_2));
    removeBefore(list8, 170); // Don't have any element before
    assert(areListsEqual(list8, expectedList8_2));
    std::cout << "Passed" << std::endl;
    freeList(expectedList8);
    freeList(expectedList8_2);
    freeList(list8);

    // Test case 9: removeAfter
    std::cout << "Test 9/18 - removeAfter: ";
    int arr5[4] = { 220, 230, 240, 250 };
    List* list9 = createListFromArray(arr5, 4);
    removeAfter(list9, 220);
    int expectedArr9[3] = { 220, 240, 250 };
    List* expectedList9 = createListFromArray(expectedArr9, 3);
    assert(areListsEqual(list9, expectedList9));
    removeAfter(list9, 250); // Don't have any element after
    assert(areListsEqual(list9, expectedList9));
    removeAfter(list9, 240);
    int expectedArr9_3[2] = { 220, 240 };
    List* expectedList9_3 = createListFromArray(expectedArr9_3, 2);
    assert(areListsEqual(list9, expectedList9_3));
    std::cout << "Passed" << std::endl;
    freeList(expectedList9);
    freeList(expectedList9_3);
    freeList(list9);

    // Test case 10: addPos
    std::cout << "Test 10/18 - addPos: ";
    List* list10 = new List();
    assert(addPos(list10, 280, 0));
    assert(list10->p_head != nullptr && list10->p_head->key == 280 && list10->p_tail->key == 280);
    assert(addPos(list10, 290, 1));
    assert(list10->p_head->key == 280 && list10->p_tail->key == 290 && list10->p_head->p_next->key == 290);
    assert(addPos(list10, 300, 1));
    assert(list10->p_head->key == 280 && list10->p_tail->key == 290 && list10->p_head->p_next->key == 300);
    assert(list10->p_head->p_next->p_next->key == 290);
    assert(addPos(list10, 310, 3));
    assert(list10->p_head->key == 280 && list10->p_tail->key == 310 && list10->p_head->p_next->key == 300);
    assert(list10->p_head->p_next->p_next->key == 290 && list10->p_head->p_next->p_next->p_next->key == 310);
    assert(!addPos(list10, 320, 5));  // Positions out of range
    assert(!addPos(list10, 330, -1)); // Negative position
    std::cout << "Passed" << std::endl;
    freeList(list10);

    // Test case 11: RemovePos
    std::cout << "Test 11/18 - RemovePos: ";
    int arr11[5] = { 340, 350, 360, 370, 380 };
    List* list11 = createListFromArray(arr11, 5);
    removePos(list11, 340, 0);
    assert(list11->p_head->key == 350 && list11->p_tail->key == 380);
    assert(list11->p_head->p_next->key == 360 && list11->p_head->p_next->p_next->key == 370 && list11->p_head->p_next->p_next->p_next->key == 380);
    removePos(list11, 370, 2);
    assert(list11->p_head->key == 350 && list11->p_tail->key == 380);
    assert(list11->p_head->p_next->key == 360 && list11->p_head->p_next->p_next->key == 380);
    removePos(list11, 350, 5); // Positions out of range
    assert(list11->p_head->key == 350 && list11->p_tail->key == 380);
    std::cout << "Passed" << std::endl;
    freeList(list11);

    // Test case 12: addBefore
    std::cout << "Test 12/18 - addBefore: ";
    int arr12[4] = { 390, 400, 410, 420 };
    List* list12 = createListFromArray(arr12, 4);
    assert(addBefore(list12, 380, 400));
    int arr12_1[5] = { 390, 380, 400, 410, 420 };
    List* expectedList12_1 = createListFromArray(arr12_1, 5);
    assert(areListsEqual(list12, expectedList12_1));
    assert(addBefore(list12, 370, 390));
    int arr12_2[6] = { 370, 390, 380, 400, 410, 420 };
    List* expectedList12_2 = createListFromArray(arr12_2, 6);
    assert(areListsEqual(list12, expectedList12_2));
    assert(!addBefore(list12, 360, 350)); // Don't have any element before
    assert(areListsEqual(list12, expectedList12_2));
    std::cout << "Passed" << std::endl;
    freeList(list12);
    freeList(expectedList12_1);
    freeList(expectedList12_2);

    // Test case 13: addAfter
    std::cout << "Test 13/18 - addAfter: ";
    int arr13[4] = { 430, 440, 450, 460 };
    List* list13 = createListFromArray(arr13, 4);
    assert(addAfter(list13, 470, 440));
    int arr13_1[5] = { 430, 440, 470, 450, 460 };
    List* expectedList13_1 = createListFromArray(arr13_1, 5);
    assert(areListsEqual(list13, expectedList13_1));
    assert(addAfter(list13, 480, 460));
    int arr13_2[6] = { 430, 440, 470, 450, 460, 480 };
    List* expectedList13_2 = createListFromArray(arr13_2, 6);
    assert(areListsEqual(list13, expectedList13_2));
    assert(!addAfter(list13, 490, 200)); // Don't have any element after
    assert(areListsEqual(list13, expectedList13_2));
    std::cout << "Passed" << std::endl;
    freeList(expectedList13_1);
    freeList(expectedList13_2);
    freeList(list13);

    // Test case 14: printList
    std::cout << "Test 14/18 - printList: ";
    int arr14[3] = { 500, 510, 520 };
    List* list14 = createListFromArray(arr14, 3);
    std::cout << "Expected: 500 510 520 | Actual: ";
    printList(list14);
    std::cout << "Passed" << std::endl;
    freeList(list14);

    // Test case 15: countElements
    std::cout << "Test 15/18 - countElements: ";
    int arr15[5] = { 530, 540, 550, 560, 570 };
    List* list15 = createListFromArray(arr15, 5);
    assert(countElements(list15) == 5);
    List* emptyList15 = new List();
    assert(countElements(emptyList15) == 0);
    std::cout << "Passed" << std::endl;
    freeList(list15);
    freeList(emptyList15);

    // Test case 16: reverseList
    /*std::cout << "Test 16/18 - reverseList: ";
    int arr16[4] = { 580, 590, 600, 610 };
    List* list16 = createListFromArray(arr16, 4);
    List* reversedList = reverseList(list16);
    int expectedArr16[4] = { 610, 600, 590, 580 };
    List* expectedList16 = createListFromArray(expectedArr16, 4);
    assert(areListsEqual(reversedList, expectedList16));
    std::cout << "Passed" << std::endl;
    freeList(list16);
    freeList(reversedList);
    freeList(expectedList16);*/

    // Test case 16: reverseList
    std::cout << "Test 16/18 - reverseList: ";
    int arr16[4] = { 580, 590, 600, 610 };
    List* list16 = createListFromArray(arr16, 4);
    List* reversedList = reverseList(list16);  // reversedList là một danh sách mới
    int expectedArr16[4] = { 610, 600, 590, 580 };
    List* expectedList16 = createListFromArray(expectedArr16, 4);
    assert(areListsEqual(reversedList, expectedList16));
    std::cout << "Passed" << std::endl;
    freeList(list16);          // Giải phóng danh sách gốc
    freeList(reversedList);    // Giải phóng danh sách đảo ngược
    freeList(expectedList16);  // Giải phóng danh sách kỳ vọng

    // Test case 17: removeDuplicate
    std::cout << "Test 17/18 - removeDuplicate: ";
    int arr17[6] = { 620, 630, 630, 640, 640, 640 };
    List* list17 = createListFromArray(arr17, 6);
    removeDuplicate(list17);
    int expectedArr17[3] = { 620, 630, 640 };
    List* expectedList17 = createListFromArray(expectedArr17, 3);
    assert(areListsEqual(list17, expectedList17));
    std::cout << "Passed" << std::endl;
    freeList(list17);
    freeList(expectedList17);

    // Test case 18: removeElement
    std::cout << "Test 18/18 - removeElement: ";
    int arr18[5] = { 650, 660, 670, 660, 680 };
    List* list18 = createListFromArray(arr18, 5);
    assert(removeElement(list18, 660));
    assert(countElements(list18) == 3);
    assert(!removeElement(list18, 999));
    std::cout << "Passed" << std::endl;
    freeList(list18);

    std::cout << "--- The end ---" << std::endl;
    return 0;
}
